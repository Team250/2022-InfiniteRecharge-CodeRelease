// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.Timer; import edu.wpi.first.wpilibj.DriverStation; import com.kauailabs.navx.frc.AHRS; import edu.wpi.first.wpilibj.SPI; import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax fLD;
private CANSparkMax bLD;
private CANSparkMax bRD;
private CANSparkMax fRD;
private MecanumDrive mecanumDrive1;
private AHRS navXMicro1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isTurtleModeOn = false;
    private double kTurtleXSpeed = 0.50;
    private double kTurtleYSpeed = 0.50;
    private double kTurtleRotateSpeed = 0.50;

    private double fieldOffsetAngle = 0;

    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
fLD = new CANSparkMax(11, MotorType.kBrushless);
 
 fLD.restoreFactoryDefaults();fLD.setInverted(true);
fLD.setIdleMode(IdleMode.kCoast);

bLD = new CANSparkMax(12, MotorType.kBrushless);
 
 bLD.restoreFactoryDefaults();bLD.setInverted(true);
bLD.setIdleMode(IdleMode.kCoast);

bRD = new CANSparkMax(14, MotorType.kBrushless);
 
 bRD.restoreFactoryDefaults();bRD.setInverted(false);
bRD.setIdleMode(IdleMode.kCoast);

fRD = new CANSparkMax(13, MotorType.kBrushless);
 
 fRD.restoreFactoryDefaults();fRD.setInverted(false);
fRD.setIdleMode(IdleMode.kCoast);

mecanumDrive1 = new MecanumDrive(fLD, bLD,
fRD, bRD);
 addChild("Mecanum Drive 1",mecanumDrive1);
 mecanumDrive1.setSafetyEnabled(true);
mecanumDrive1.setExpiration(0.1);
mecanumDrive1.setMaxOutput(1.0);


try { navXMicro1 = new AHRS(SPI.Port.kMXP);} catch (RuntimeException ex ) {DriverStation.reportError( ex.getMessage(), true);} Timer.delay(1.0);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        fLD.getAlternateEncoder(4096 * 2);
        fRD.getAlternateEncoder(4096 * 2);
        bLD.getAlternateEncoder(4096 * 2);
        bRD.getAlternateEncoder(4096 * 2);

        SmartDashboard.putNumber("Field Oriented Angle Offset", fieldOffsetAngle);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        updateFieldOffset();
        SmartDashboard.putBoolean("Turtle Mode Enabled", isTurtleModeOn);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setDrive(double ySpeed, double xSpeed, double zRotation, boolean isFieldOriented) {
        //Apply turtle mode d rates
        xSpeed = (isTurtleModeOn) ? xSpeed * kTurtleXSpeed : xSpeed;
        ySpeed = (isTurtleModeOn) ? ySpeed * kTurtleYSpeed : ySpeed;
        zRotation = (isTurtleModeOn) ? zRotation * kTurtleRotateSpeed : zRotation;

        // Find a good way to alert driver if NAVX is down and reverting to robot
        // oriented control
        if (isFieldOriented && navXMicro1.isConnected()) {
            double angle = navXMicro1.getYaw() + fieldOffsetAngle;
            xSpeed = Utilities.joystickDeadband(xSpeed, Constants.JoyStick1DeadBandWidthX);
            ySpeed = Utilities.joystickDeadband(ySpeed, Constants.JoyStick1DeadBandWidthY);
            zRotation = Utilities.joystickDeadband(zRotation, Constants.JoyStick1DeadBandWidthR);
            
            mecanumDrive1.driveCartesian(ySpeed, xSpeed, zRotation, angle);
        } else {
            mecanumDrive1.driveCartesian(ySpeed, xSpeed, zRotation);
        }
    }

    public void setDrive(double ySpeed, double xSpeed, double zRotation) {
        setDrive(ySpeed, xSpeed, zRotation, false);
    }

    public void setFieldOffsetAngle(double angle) {
        if (angle <= 180 && angle >= -180) {
            fieldOffsetAngle = angle;
        }
    }

    public double getFieldOffsetAngle() {
        return fieldOffsetAngle;
    }

    private void updateFieldOffset() {
        double angle = SmartDashboard.getNumber("Field Oriented Angle Offset", 0);
        if ((angle != fieldOffsetAngle)) {
            setFieldOffsetAngle(angle);
        }
    }

    public void enableTurtleMode(boolean isEnabled){
        isTurtleModeOn = isEnabled;
    }

    public boolean isTurtleModeEnabled() {
        return isTurtleModeOn;
    }
}
