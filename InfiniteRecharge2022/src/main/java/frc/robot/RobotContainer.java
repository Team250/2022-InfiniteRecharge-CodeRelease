// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.*;
import edu.wpi.first.wpilibj2.command.button.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final NonActuated m_nonActuated = new NonActuated();
    public final Climber m_climber = new Climber();
    public final SCurve m_sCurve = new SCurve();
    public final Intake m_intake = new Intake();
    public final Drivetrain m_drivetrain = new Drivetrain();

// Joysticks
private final XboxController xboxController1 = new XboxController(1);
private final Joystick joystick1 = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // Manualy created SubSystems
  public final Shooter2 m_shooter2 = new Shooter2();

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_nonActuated);
    SmartDashboard.putData(m_climber);
    SmartDashboard.putData(m_sCurve);
    SmartDashboard.putData(m_intake);
    SmartDashboard.putData(m_drivetrain);


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Manual Drive", new ManualDrive( m_drivetrain ));
    SmartDashboard.putData("Extend Intake", new ExtendIntake( m_intake ));
    SmartDashboard.putData("Retract Intake", new RetractIntake( m_intake ));
    SmartDashboard.putData("Open Climb Arm", new OpenClimbArm( m_climber ));
    SmartDashboard.putData("Close Climb Arm", new CloseClimbArm( m_climber ));
    SmartDashboard.putData("Extend Climb Arm", new ExtendClimbArm( m_climber ));
    SmartDashboard.putData("Retract Climb Arm", new RetractClimbArm( m_climber ));
    SmartDashboard.putData("SCurve Command", new SCurveCommand( m_sCurve ));
    SmartDashboard.putData("SCurveManual Forward", new SCurveManualForward( m_sCurve ));
    SmartDashboard.putData("SCurve Manual Reverse", new SCurveManualReverse( m_sCurve ));
    SmartDashboard.putData("StopSCurve", new StopSCurve( m_sCurve ));
    SmartDashboard.putData("Outer Intake Forward", new OuterIntakeForward( m_intake ));
    SmartDashboard.putData("Outer Intake Reverse", new OuterIntakeReverse( m_intake ));
    SmartDashboard.putData("SCurve Auto Intake", new SCurveAutoIntake( m_sCurve ));
    SmartDashboard.putData("Field Oriented Drive", new FieldOrientedDrive( m_drivetrain ));
    SmartDashboard.putData("DriveTime: Full Forward", new DriveTime(1, m_drivetrain));
    SmartDashboard.putData("DriveTime: Full Backwards", new DriveTime(1, m_drivetrain));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    SmartDashboard.putData(m_shooter2);
    //SmartDashboard.putData("Manual Shooter", new ManualShooter());
    SmartDashboard.putData("SCurve Auto Intake 2", new ScurveAutoIntake2(m_sCurve));
    SmartDashboard.putData("Auto_Wait_ShortSHoot_Drive", new Auto_Wait_ShortSHoot_Drive(m_drivetrain, m_sCurve));

    // Configure the button bindings
    configureButtonBindings();
  
    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drivetrain.setDefaultCommand(new ManualDrive( m_drivetrain ) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_climber.setDefaultCommand(new ClimbDefault( m_climber, m_drivetrain ) );

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("DriveTime: Full Forward", new DriveTime(1, m_drivetrain));
    m_chooser.addOption("DriveTime: Full Backwards", new DriveTime(1, m_drivetrain));
    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    m_chooser.addOption("Auto Wait, Shoot, and Back Up", new Auto_Wait_ShortSHoot_Drive(m_drivetrain, m_sCurve));
    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    new Button(() -> xboxController1.getYButton())
        .whenHeld(new ParallelCommandGroup(new ManualShooter(Constants.ShooterFarShot),
            new SequentialCommandGroup(new WaitCommand(1), new SCurveManualForward(m_sCurve))));
    // Parallel:
    //   Shoot
    //   Sequential:
    //     Wait a bit
    //     SCurveForward

    new Button(() -> xboxController1.getAButton())
        .toggleWhenPressed(new ParallelCommandGroup(new OuterIntakeForward(m_intake),
            new SequentialCommandGroup(new WaitCommand(0.25), new ScurveAutoIntake2(m_sCurve))));
    // Parallel:
    //   Shoot
    //   Sequential:
    //     Wait a bit
    //     SCurveForward

    new Button(() -> xboxController1.getXButton())
        .whenHeld(new ParallelCommandGroup(new ManualShooter(Constants.ShooterCloseShot),
            new SequentialCommandGroup(new WaitCommand(1), new SCurveManualForward(m_sCurve))));
    // Parallel:
    //   Shoot
    //   Sequential:
    //     Wait a bit
    //     SCurveForward

    new Button(() -> xboxController1.getBackButton())
        .whenHeld(new SCurveManualReverse(m_sCurve));
    // Parallel:
    //   Shoot
    //   Sequential:
    //     Wait a bit
    //     SCurveForward

    new Button(() -> joystick1.getRawButton(14))
    .toggleWhenPressed(new FieldOrientedDrive(m_drivetrain));

    new Button(() -> joystick1.getRawButton(13))
    .whenPressed(new CancelTurtleMode(m_drivetrain));
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick1() {
        return joystick1;
    }

public XboxController getXboxController1() {
      return xboxController1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
